AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template Application Load Balancer and Autoscaling:
  Sample template that creates ALB and AS. Note that you are billed
  for the AWS resources that you use when you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Certicicate ARN"
        Parameters:
          - AcmCertificate
      - 
        Label:
          default: "Export VPC Stack Name"
        Parameters:
          - ExportVpcStackName 
      - 
        Label: 
          default: "EC2 Web Server Launch"
        Parameters: 
          - EC2ImageID
          - InstanceType
          - EC2KeyName  
             
Parameters:
  AcmCertificate:
    Description: Name of the certification Manager
    Type: String
  ExportVpcStackName:
    Description: The name of the VPC Stack nameto export the value from
    Type: String
  OperatorEmail:
    Description: A valid email address to notify if any issue.
    Type: String
  EC2KeyName:
    Description: A valid email address to notify if any issue.
    Type: AWS::EC2::KeyPair::KeyName 
  EC2ImageID:
    Description: The AMI of a latest 
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  WebServerLaunchTemplateName: 
    Description: The name of the launch tepletaple that will be use
    Type: String  
    Default: NAS-Web-Server-Launch-Template
  InstanceType: 
    Description: the type of instance that will run 
    Type: String 
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.large
      - m1.small
      - m1.meduim
      - m1.large
  

Resources:
  ApplicationLoadBalancer:  # Creation of the Application Load Balancer
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: NAS-ALB
      SecurityGroups:
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-ALBSecurityGroup'
      Subnets:
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-PublicSubnet1'
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-PublicSubnet2'
      Scheme: internet-facing
      Type: application
  ALBListenerNoSslCertificate:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties: 
      DefaultActions:
        - RedirectConfig: 
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: HTTPS
            StatusCode: 'HTTP_301'
            Query: '#{query}'
          Type: redirect
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALBListenerSslCertificate:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
  #   Properties:
  #     Certificates:
  #       - CertificateArn: !Ref AcmCertificate
      # DefaultActions:
      #   - Type: forward
      #     TargetGroupArn: !Ref ALBTargetGroup
      # # LoadBalancerArn: !Ref ApplicationLoadBalancer
      # Port: 443
      # Protocol: 'HTTPS'  
      # ListenerArn: !Ref WebServerLaunchTemplate
  

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      # HealthyThreshholdCount: 2
      Matcher: 
        HttpCode: 200,302
      Name: MyWebServers
      Port: 80
      Protocol:  HTTP 
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-VPCID 
  

  WebServerLaunchTemplate:  # Creation of the Application Load Balancer
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Ref WebServerLaunchTemplateName
      LaunchTemplateData:
        ImageId: !Ref EC2ImageID
        InstanceType: !Ref InstanceType
        KeyName: !Ref EC2KeyName
        Monitoring: 
          Enabled: true 
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${ExportVpcStackName}-WebServerSecurityGroup'

  NotificationTopic:
    Type: AWS::SNS::Topic  
    Properties: 
      Subscription: 
        - Endpoint: !Ref OperatorEmail
          Protocol: EMAIL
  WebServerAutoScalingGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup 
    Properties: 
      AutoScalingGroupName: NAS-AS 
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-PrivateSubnet1'
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-PrivateSubnet4'  
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateName: !Ref WebServerLaunchTemplateName
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 2
      Tags: 
        - Key: Name 
          Value: NAS-Web-Autoscaling 
          PropagateAtLaunch: true
      TargetGroupARNs: 
        - !Ref ALBTargetGroup
      NotificationConfiguration:
        TopicARN: !Ref NotificationTopic
        NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH' 
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR' 

  WebServerScaleUpPolicy: 
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties: 
      AdjustmentType: ChangeInCapacity 
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
  WebServerScaleDownPolicy: 
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties: 
      AdjustmentType: ChangeInCapacity 
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: -1

  CPUAlarmHigh: 
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription : Scale-up if CPU >90% for 10 minutes
      MetricName: CPUUtilization 
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: 
        - !Ref WebServerScaleUpPolicy
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow: 
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription : Scale-up if CPU >90% for 10 minutes
      MetricName: CPUUtilization 
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      ComparisonOperator: LessThanThreshold   

  AsConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref EC2KeyName
      ImageId: !Ref EC2ImageID
      AssociatePublicIpAddress: true 
      SecurityGroups: 
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-WebServerSecurityGroup'
        
  
Outputs:
  ALBTargetGroup:
    Description: Web Server Target group 
    Export:
      Name: !Sub '${AWS::StackName}-ALBTargetGroup'
    Value: !Ref ALBTargetGroup  

  ApplicationLoadBalancerDnsName:
    Description: Web Server Target group 
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationLoadBalancerDnsName'
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ApplicationLoadBalancerZoneID:
    Description: Web Server Target group 
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationLoadBalancerZoneID'
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID  
