AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_with_PublicIPs_And_DNS: Sample template
  that creates a VPC with DNS and public IPs enabled. Note that you are billed
  for the AWS resources that you use when you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Certicicate ARN"
        Parameters:
          - AcmCertificate
      - 
        Label:
          default: "Export VPC Stack Name"
        Parameters:
          - ExportVpcStackName 
      - 
        Label: 
          default: "EC2 Parameters"
        Parameters: 
          - AmazonImageID
          - InstanceType
          - KeyName  
             
Parameters:
  AcmCertificate:
    Description: Name of the certification Manager
    Type: String
  ExportVpcStackName:
    Description: The name of the VPC Stack nameto export the value from
    Type: String
  InstanceType:
    Description: WebServer EC2 instance type 
    Type: String 
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.nano
  KeyName: 
    Description: Name of an existing EC2 key pair 
    Type: 'AWS::EC2::KeyPair::KeyName' 
  AmazonImageID: 
    Description: Latest image ID 
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2   
    
Resources: 
  EC2Instance1: 
    Type: 'AWS::EC2::Instance' 
    Properties: 
      InstanceType: !Ref InstanceType 
      SubnetId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup  
      KeyName: !Ref KeyName  
      ImageId: !Ref AmazonImageID 
      Tags: 
        - Key: Name 
          Value: PrivateWebServer1 
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install httpd -y
            echo '<html><body><h1 style="color:Blue;">Welcome to the NAS Financial Server 1 (Blue)</h1></body></html>' > /var/www/html/index.html
            sudo systemctl start httpd
            sudo systemctl enable httpd

  EC2Instance2: 
    Type: 'AWS::EC2::Instance' 
    Properties: 
      InstanceType: !Ref InstanceType 
      SubnetId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet4
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup  
      KeyName: !Ref KeyName  
      ImageId: !Ref AmazonImageID 
      Tags: 
        - Key: Name 
          Value: PrivateWebServer2        
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install httpd -y
            echo '<html><body><h1 style="color:Red;">Welcome to the NAS Financial Server 2 (Red)</h1></body></html>' > /var/www/html/index.html
            sudo systemctl start httpd
            sudo systemctl enable httpd. 

  ApplicationLoadBalancer:  # Creation of the Application Load Balancer
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: NAS-ALB
      SecurityGroups:
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-ALBSecurityGroup'
      Subnets:
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-PublicSubnet1'
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-PublicSubnet2'
  ALBListenerNoSslCertificate:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties: 
      DefaultActions:
        - RedirectConfig: 
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS 
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref AcmCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS      

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      # HealthyThreshholdCount: 2
      Matcher: 
        HttpCode: 200,302
      Name: MyWebServers
      Port: 80
      Protocol:  HTTP 
      Targets: 
        - Id: !Ref EC2Instance1  
          Port: 80 
        - Id: !Ref EC2Instance2
          Port: 80
      TargetType: instance     
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-VPCID 
  
Outputs:
  ALBTargetGroup:
    Description: Web Server Target group 
    Export:
      Name: !Sub '${AWS::StackName}-ALBTargetGroup'
    Value: !Ref ALBTargetGroup  

  ApplicationLoadBalancerDnsName:
    Description: Web Server Target group 
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationLoadBalancerDnsName'
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ApplicationLoadBalancerZoneID:
    Description: Web Server Target group 
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationLoadBalancerZoneID'
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID 

   



  